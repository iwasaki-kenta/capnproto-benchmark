// Code generated by capnpc-go. DO NOT EDIT.

package main

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Message struct{ capnp.Struct }

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd690148fa2105b79

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd690148fa2105b79, s.Struct)
	return str
}

func (s Message) Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasBytes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBytes(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xd690148fa2105b79, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

type Benchmark struct{ Client capnp.Client }

// Benchmark_TypeID is the unique identifier for the type Benchmark.
const Benchmark_TypeID = 0xf48f3287a0980d19

func (c Benchmark) Send(ctx context.Context, params func(Benchmark_send_Params) error, opts ...capnp.CallOption) Benchmark_send_Results_Promise {
	if c.Client == nil {
		return Benchmark_send_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf48f3287a0980d19,
			MethodID:      0,
			InterfaceName: "benchmark.capnp:Benchmark",
			MethodName:    "send",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Benchmark_send_Params{Struct: s}) }
	}
	return Benchmark_send_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Benchmark_Server interface {
	Send(Benchmark_send) error
}

func Benchmark_ServerToClient(s Benchmark_Server) Benchmark {
	c, _ := s.(server.Closer)
	return Benchmark{Client: server.New(Benchmark_Methods(nil, s), c)}
}

func Benchmark_Methods(methods []server.Method, s Benchmark_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf48f3287a0980d19,
			MethodID:      0,
			InterfaceName: "benchmark.capnp:Benchmark",
			MethodName:    "send",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Benchmark_send{c, opts, Benchmark_send_Params{Struct: p}, Benchmark_send_Results{Struct: r}}
			return s.Send(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Benchmark_send holds the arguments for a server call to Benchmark.send.
type Benchmark_send struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Benchmark_send_Params
	Results Benchmark_send_Results
}

type Benchmark_send_Params struct{ capnp.Struct }

// Benchmark_send_Params_TypeID is the unique identifier for the type Benchmark_send_Params.
const Benchmark_send_Params_TypeID = 0xbfc780a1c3ae4c72

func NewBenchmark_send_Params(s *capnp.Segment) (Benchmark_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Benchmark_send_Params{st}, err
}

func NewRootBenchmark_send_Params(s *capnp.Segment) (Benchmark_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Benchmark_send_Params{st}, err
}

func ReadRootBenchmark_send_Params(msg *capnp.Message) (Benchmark_send_Params, error) {
	root, err := msg.RootPtr()
	return Benchmark_send_Params{root.Struct()}, err
}

func (s Benchmark_send_Params) String() string {
	str, _ := text.Marshal(0xbfc780a1c3ae4c72, s.Struct)
	return str
}

func (s Benchmark_send_Params) Req() (Message, error) {
	p, err := s.Struct.Ptr(0)
	return Message{Struct: p.Struct()}, err
}

func (s Benchmark_send_Params) HasReq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Benchmark_send_Params) SetReq(v Message) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReq sets the req field to a newly
// allocated Message struct, preferring placement in s's segment.
func (s Benchmark_send_Params) NewReq() (Message, error) {
	ss, err := NewMessage(s.Struct.Segment())
	if err != nil {
		return Message{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Benchmark_send_Params_List is a list of Benchmark_send_Params.
type Benchmark_send_Params_List struct{ capnp.List }

// NewBenchmark_send_Params creates a new list of Benchmark_send_Params.
func NewBenchmark_send_Params_List(s *capnp.Segment, sz int32) (Benchmark_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Benchmark_send_Params_List{l}, err
}

func (s Benchmark_send_Params_List) At(i int) Benchmark_send_Params {
	return Benchmark_send_Params{s.List.Struct(i)}
}

func (s Benchmark_send_Params_List) Set(i int, v Benchmark_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Benchmark_send_Params_List) String() string {
	str, _ := text.MarshalList(0xbfc780a1c3ae4c72, s.List)
	return str
}

// Benchmark_send_Params_Promise is a wrapper for a Benchmark_send_Params promised by a client call.
type Benchmark_send_Params_Promise struct{ *capnp.Pipeline }

func (p Benchmark_send_Params_Promise) Struct() (Benchmark_send_Params, error) {
	s, err := p.Pipeline.Struct()
	return Benchmark_send_Params{s}, err
}

func (p Benchmark_send_Params_Promise) Req() Message_Promise {
	return Message_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Benchmark_send_Results struct{ capnp.Struct }

// Benchmark_send_Results_TypeID is the unique identifier for the type Benchmark_send_Results.
const Benchmark_send_Results_TypeID = 0x992abfab55154dfe

func NewBenchmark_send_Results(s *capnp.Segment) (Benchmark_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Benchmark_send_Results{st}, err
}

func NewRootBenchmark_send_Results(s *capnp.Segment) (Benchmark_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Benchmark_send_Results{st}, err
}

func ReadRootBenchmark_send_Results(msg *capnp.Message) (Benchmark_send_Results, error) {
	root, err := msg.RootPtr()
	return Benchmark_send_Results{root.Struct()}, err
}

func (s Benchmark_send_Results) String() string {
	str, _ := text.Marshal(0x992abfab55154dfe, s.Struct)
	return str
}

func (s Benchmark_send_Results) Res() (Message, error) {
	p, err := s.Struct.Ptr(0)
	return Message{Struct: p.Struct()}, err
}

func (s Benchmark_send_Results) HasRes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Benchmark_send_Results) SetRes(v Message) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRes sets the res field to a newly
// allocated Message struct, preferring placement in s's segment.
func (s Benchmark_send_Results) NewRes() (Message, error) {
	ss, err := NewMessage(s.Struct.Segment())
	if err != nil {
		return Message{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Benchmark_send_Results_List is a list of Benchmark_send_Results.
type Benchmark_send_Results_List struct{ capnp.List }

// NewBenchmark_send_Results creates a new list of Benchmark_send_Results.
func NewBenchmark_send_Results_List(s *capnp.Segment, sz int32) (Benchmark_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Benchmark_send_Results_List{l}, err
}

func (s Benchmark_send_Results_List) At(i int) Benchmark_send_Results {
	return Benchmark_send_Results{s.List.Struct(i)}
}

func (s Benchmark_send_Results_List) Set(i int, v Benchmark_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Benchmark_send_Results_List) String() string {
	str, _ := text.MarshalList(0x992abfab55154dfe, s.List)
	return str
}

// Benchmark_send_Results_Promise is a wrapper for a Benchmark_send_Results promised by a client call.
type Benchmark_send_Results_Promise struct{ *capnp.Pipeline }

func (p Benchmark_send_Results_Promise) Struct() (Benchmark_send_Results, error) {
	s, err := p.Pipeline.Struct()
	return Benchmark_send_Results{s}, err
}

func (p Benchmark_send_Results_Promise) Res() Message_Promise {
	return Message_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_9c0139b8202143ba = "x\xda\x84\xd1\xb1K\x02a\x1c\xc6\xf1\xe7\xb9\xf3\xba\x96" +
	"\xa3{9\x1bj\xd1\xa2IB\xc8\xa6\\\x94\x1a\"H" +
	"\xf0\x82\xa6\xa6\xd3^\x0aL\xd1{mpkk\xb41" +
	"\xa1 [\x85\xe6\x08B(BZ\x1b\xfa/\xda\x9a\xbb" +
	"\xf0\xcc\xce!l{y\xf9\xf2\xe1\x81\x9f\xdd\xcbkk" +
	"\xc6@\x03\xdc\xa41\x13|\x15\xe6\xf7{\xfdT\x07b" +
	"\x91\x80A\x13X\xdfa\x96\xa0\xe32\x07\x06\xfe\xee\xdd" +
	"s\xf7l\xd0\x9f\x0c\x1a\xcc\x0c\x83V\x18\xb4\x0e\xec\xdb" +
	"v\xfc\xe2\x1d\xc2f\xf0\xb0\xb5\x94\xbc\xdf\xe0\xd5(t" +
	":|r\xba\xe1\xeb:l\x17\xac\xcb\x9b\xf3L\xfb\x13" +
	"\xc2\xd6\xa3\x16t\x1e\xf9\xe6\xbc\x86\xe1\x0b\xb7\x9d\x0f\x9a" +
	"X\x0dJ\xb2V>\xaez\xbe^I\x97\xbdz\xad\x9e" +
	"\xdd\xfc\xf9\xa8\xa4\x95\xac\x1d\xae\xec\xe5\xa4:=i*" +
	"7\xa6\xc7\x80\x18\x01a-\x03\xee\xacN7\xae\xd1\xf4" +
	"\xa5\xa2\x1d\xcd\x03i\x83\xff\xaa\xc5\x84\xe7{\xd5)h" +
	"c\x0a\xaa\x8d\xd1\x82T\xca;\x92(\x92\x93R&\x92" +
	"\x12\xa5VS*Z\xd0h\xfd%\x8cg\xb122\x0c" +
	"\xe0\xf7\x16\x1c_M\x88\x144a\x98s\xc3\xe9y\x16" +
	"\xc9\xef\x00\x00\x00\xff\xff\xdeD}u"

func init() {
	schemas.Register(schema_9c0139b8202143ba,
		0x992abfab55154dfe,
		0xbfc780a1c3ae4c72,
		0xd690148fa2105b79,
		0xf48f3287a0980d19)
}
